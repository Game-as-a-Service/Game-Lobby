import fs from "fs";
import path from "path";
import { parse } from "node-html-parser";

const rootDir = path.join(__dirname, "../../");
const iconsDir = path.join(rootDir, "/assets/icons");
const outputDir = path.join(
  rootDir,
  "/components/shared/Icon/v3/icons/generate"
);
const iconTemplate = fs.readFileSync(
  path.join(__dirname, "iconTemplate.tsx"),
  "utf-8"
);

const convertHtmlToJsx = (htmlString: string) => {
  let jsxString = htmlString.replace(
    /style="([^"]*)"/g,
    (_, styles: string) => {
      const styleObject = Object.fromEntries(
        styles.split(";").map((style) => {
          const [key, value] = style.split(":");
          const camelCaseKey = key.replace(/-([a-z])/g, (_, letter: string) =>
            letter.toUpperCase()
          );
          return [camelCaseKey, value];
        })
      );

      return `style={${JSON.stringify(styleObject)}}`;
    }
  );

  jsxString = jsxString.replace(
    /([a-z])-([a-z])/g,
    (_, p1, p2) => p1 + p2.toUpperCase()
  );

  return jsxString;
};

(async () => {
  const files = await fs.promises.readdir(iconsDir);
  const iconFiles = files.filter((file) => file.endsWith(".svg"));

  await Promise.all(
    iconFiles.map(async (file) => {
      const fileName = file.split(".")[0];
      const inputFile = path.join(iconsDir, file);
      const html = await fs.promises.readFile(inputFile, "utf-8");
      const svg = parse(html).querySelector("svg");

      if (!svg) {
        console.error(`No SVG found in ${inputFile}`);
        return;
      }

      const wrapperAttributes = Object.entries(svg.attributes)
        .filter(([key]) => !["width", "height"].includes(key))
        .map(([key, value]) => `${key}="${value}"`)
        .join(" ");

      const content = svg.childNodes.map((node) => node.toString()).join("");
      const outputFile = path.join(outputDir, `${fileName}.tsx`);
      const upperCaseFileName = fileName
        .replace(/-([a-z])/g, (_, letter) => letter.toUpperCase())
        .replace(/^[a-z]/, (match) => match.toUpperCase());
      let iconString = iconTemplate
        .replace("replace-attributes", wrapperAttributes)
        .replace("replace-content", convertHtmlToJsx(content))
        .replace(/black/g, "currentColor")
        .replace(/IconName/g, upperCaseFileName)
        .replace(/^\s+|\s+$/g, "");

      iconString = `/** This file is auto-generated by icon-convert script. Do not modify directly as changes may be overwritten. */\n\n${iconString}`;

      try {
        await fs.promises.readdir(outputDir);
      } catch {
        await fs.promises.mkdir(outputDir);
      }

      try {
        await fs.promises.writeFile(outputFile, iconString, "utf-8");
      } catch {
        await fs.promises.appendFile(outputFile, iconString, "utf-8");
      }
    })
  );
})();
